{"version":3,"sources":["Film.js","Character.js","App.js","serviceWorker.js","index.js"],"names":["Film","props","react_default","a","createElement","list","itemLayout","dataSource","films","renderItem","film","Item","title","director","moment","Date","release","format","Character","state","error","loadingFilms","loadCharacter","character","fetch","url","then","response","json","results","_this","setState","filmsResponse","map","release_date","catch","console","log","getCharacterFilms","Promise","all","filmResults","this","_this$state","es_alert","message","description","type","showIcon","spin","size","src_Film","Component","App","selectedCharacter","handleClick","handleClose","_this2","className","grid","gutter","xs","sm","md","lg","CharactersJSON","characters","card","name","onClick","drawer","width","placement","closable","visible","Boolean","onClose","src_Character","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a502b7f1.chunk.js","sourcesContent":["import React from 'react';\nimport { List } from 'antd';\nimport moment from 'moment';\n\nconst Film = (props) => {\n  return (\n      <List\n        itemLayout=\"vertical\"\n        dataSource={props.films}\n        renderItem={film => (\n        <List.Item>\n          <h3>{film.title}</h3>\n          <p>{film.director}</p>\n          <p>{moment(new Date(film.release)).format('dddd, MMMM Do YYYY')}</p>\n        </List.Item>\n      )}/>\n  )\n}\n\nexport default Film;","import React, { Component } from 'react';\nimport { Alert, Spin } from 'antd';\nimport Film from './Film';\n\nfunction getCharacterFilms (results) {\n  return results.films.map(film => {\n    return fetch(film)\n      .then(response => {\n        return response.json()\n      })\n      .then(results => {\n        return {\n          title: results.title,\n          director: results.director,\n          release: results.release_date\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n  });  \n}\n\nclass Character extends Component {\n  state = {\n    error: false,\n    loadingFilms: false,\n    films: []\n  }\n\n  componentDidMount(){\n     this.loadCharacter(this.props.character);\n  }\n\n  loadCharacter = (character) => {\n    fetch(character.url)\n      .then(response => {\n        return response.json()\n      })\n      .then(results => {      \n        if(!results.films){\n          this.setState({\n            error: true,\n            films: []\n          });\n        } else {\n          this.setState({ loadingFilms: true });\n          let filmsResponse = getCharacterFilms(results);\n          Promise.all(filmsResponse)\n            .then(filmResults => {\n              this.setState({\n                films: filmResults,\n                loadingFilms: false\n              });\n            })\n        }\n      }).catch(error => {\n        console.log(error);\n      });\n  }   \n\n  render() {\n    const { error, films, loadingFilms } = this.state;\n    return  (\n      <div>\n        <h2>Film Appearances</h2>\n        {error && \n          <Alert\n            message=\"Error\"\n            description=\"No films found.\"\n            type=\"error\"\n            showIcon\n          />               \n        }\n        {loadingFilms && <Spin size=\"large\" />}\n        <Film\n          films={films}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Character;\n","import 'antd/dist/antd.css';\nimport './App.css';\nimport React, { Component } from 'react';\nimport CharactersJSON from './characters.json';\nimport Character from './Character';\nimport { List, Drawer, Card } from 'antd';\n\nclass App extends Component {\n  state = {\n    selectedCharacter: null\n  }\n\n  handleClick = (character) => {\n    this.setState({ selectedCharacter: character });\n  }\n\n  handleClose = () => {\n    this.setState({ selectedCharacter: null });\n  }\n\n  render() {\n    const { selectedCharacter } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n        <h1>Star Wars</h1>\n        <List\n          grid={{\n            gutter: 16, xs: 1, sm: 2, md: 4, lg: 4,\n          }}\n          dataSource={CharactersJSON.characters}\n          renderItem={character => (\n          <List.Item>\n            <Card title={character.name}>\n              <a onClick={() => this.handleClick(character)}>View Films</a>\n            </Card>\n          </List.Item>\n        )}/>\n\n        <Drawer\n          title={selectedCharacter && selectedCharacter.name}\n          width={300}\n          placement=\"right\"\n          closable={false}\n          visible={Boolean(selectedCharacter)}\n          onClose={this.handleClose}>\n          {selectedCharacter && <Character character={selectedCharacter} />}\n        </Drawer>        \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}